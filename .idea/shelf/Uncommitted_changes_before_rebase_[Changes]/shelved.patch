Index: scripts/caminhar.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import random\n\nclass Inimigos_animais:\n    def __init__(self, nome, vida, dano):\n        self.nome = nome\n        self.vida = vida\n        self.dano = dano\n\nclass Item:\n    def __init__(self, nome, tipo):\n        self.nome = nome\n        self.tipo = tipo\n\nclass Boneco:\n\n    def __init__(self, nome):\n        self.nome = nome\n        self.movimento = False\n        self.qtd_passos = 0\n        self.inventario = []\n        self.inimigo_encontro = None\n        self.arma = None\n\n    def caminhar(self):\n        # Simular o movimento a cada chamada\n        self.movimento = True\n        self.qtd_passos += 1\n        print(f\"{self.nome} deu um passo. Total de passos: {self.qtd_passos}\")\n\n        # Checar chance de encontrar um item\n        if random.randint(0, 100) < 50:\n            item_encontrado = itens_disp()\n            mensagem = self.set_item(item_encontrado)\n            print(mensagem)  # Agora imprime a mensagem de item encontrado\n        else:\n            inimigo_encontrando = inimigos_animais_disp()\n            mensagem = self.set_inimigo(inimigo_encontrando)\n            print(mensagem, )\n            escolha = input(\"Lutar ou Fugir? (S/N) S = Lutar / N = Fugir: \")\n            while escolha not in ['S', 'N']:\n                if escolha == \"S\":\n                    #Só por implementar sua lógica de batalha aqui theuz\n                    pass\n                else:\n                    chance = random.randint(0, 100)\n                    if chance < 20:\n                        print(\"Escapou com sucesso!\")\n                        break\n                    else:\n                        #>>>Lógica de batalha<<<\n                        pass\n        self.movimento = False  # Resetar o estado de movimento após a ação\n\n    def equipar_arma(self):\n        if not self.arma:\n            if len(self.inventario) < 1:\n                print(f\"Você não possui itens para equipar\")\n            for pos, item in enumerate(self.inventario):\n                print(f\"{pos+1} - {item.nome}\")\n            resposta = int(input(\"Qual item deseja equipar? [Escolha de acordo com o numero indicado acima]: \"))-1\n            while resposta > len(self.inventario):\n                print(f\"tamanho do inventário: {len(self.inventario)}\")\n                print(\"Item não encontrado, verifique o número utilizado\")\n                resposta = int(input(\"Qual item deseja equipar? [Escolha de acordo com o numero indicado acima]: \"))-1\n            self.arma = self.inventario[resposta].nome\n            print(f\"Você equipou {self.arma}\")\n\n\n    def set_item(self, item):\n        self.inventario.append(item)\n        return f\"{self.nome} encontrou um {item.nome}!\"\n\n    def set_inimigo(self, inimigo):\n        self.inimigo_encontro = inimigo\n        return (f\"{self.nome} encontrou um {inimigo.nome}!\\n\\n\"\n                f\"--- Status de \\033[31m{inimigo.nome}\\033[m ---\\n\"\n                f\"\\033[32mVida\\033[0m: {inimigo.vida}\\n\"\n                f\"\\033[34mDano\\033[m: {inimigo.dano}\\n\")\n\n    def mostrar_inv(self):\n        print(f\"--- Inventário de {self.nome} ---\")\n        for pos, item in enumerate(self.inventario):\n            print(f\"\\033[32m{pos+1}\\033[m - \\033[36m{item.nome}\\033[m\")\n        if self.arma:\n            print(f\"Item equipado {item.nome}\")\n\n\ndef itens_disp():\n    itens_possiveis = [\n        Item(\"Galaxy Note 7\", \"Arma\"),\n        Item(\"Poção de Vida\", \"Consumível\"),\n        Item(\"Espada Curta\", \"Arma\"),\n        Item(\"Espada Longa\", \"Arma\"),\n        Item(\"Machado de Batalha\", \"Arma\"),\n        Item(\"Elixir de Mana\", \"Consumível\"),\n        Item(\"Arco Curto\", \"Arma\"),\n        Item(\"Flechas Infinitas\", \"Acessório\"),\n        Item(\"Poção de Invisibilidade\", \"Consumível\"),\n        Item(\"Escudo de Bronze\", \"Defesa\"),\n        Item(\"Elmo de Aço\", \"Equipamento\"),\n        Item(\"Anel de Regeneração\", \"Acessório\"),\n        Item(\"Poção de Cura Rápida\", \"Consumível\"),\n        Item(\"Bastão de Magia\", \"Arma\"),\n        Item(\"Daga Envenenada\", \"Arma\"),\n        Item(\"Cota de Malha\", \"Defesa\"),\n        Item(\"Botas da Velocidade\", \"Equipamento\"),\n        Item(\"Chave do Cofre\", \"Especial\"),\n        Item(\"Espada Flamejante\", \"Arma\"),\n        Item(\"Livro de Magias\", \"Consumível\"),\n        Item(\"Poção de Resistência\", \"Consumível\"),\n        Item(\"Lança de Ouro\", \"Arma\"),\n        Item(\"Escudo de Cristal\", \"Defesa\"),\n        Item(\"Armadura de Dragão\", \"Equipamento\"),\n        Item(\"Amuleto da Sorte\", \"Acessório\")\n    ]\n    return random.choice(itens_possiveis)\n\ndef inimigos_animais_disp():\n    inimigos_disponiveis = [\n        Inimigos_animais(\"Aranha\", 15, 5),\n        Inimigos_animais(\"Rato\", 10, 3),\n        Inimigos_animais(\"Escorpião\", 15, 10),\n        Inimigos_animais(\"Lobo\", 20, 10),\n        Inimigos_animais(\"Urso\", 30, 15),\n        Inimigos_animais(\"Cobra\", 12, 8),\n        Inimigos_animais(\"Águia\", 18, 7),\n        Inimigos_animais(\"Javali\", 25, 12),\n        Inimigos_animais(\"Leão\", 35, 18),\n        Inimigos_animais(\"Tigre\", 40, 20),\n        Inimigos_animais(\"Crocodilo\", 45, 22),\n        Inimigos_animais(\"Gorila\", 50, 15),\n        Inimigos_animais(\"Rinoceronte\", 60, 25),\n        Inimigos_animais(\"Morcego\", 10, 4),\n        Inimigos_animais(\"Centopeia Gigante\", 20, 6),\n        Inimigos_animais(\"Hiena\", 22, 9),\n        Inimigos_animais(\"Lobo Alfa\", 35, 15),\n        Inimigos_animais(\"Elefante\", 70, 30),\n        Inimigos_animais(\"Falcão\", 17, 6),\n        Inimigos_animais(\"Canguru\", 28, 13),\n        Inimigos_animais(\"Tubarão\", 50, 20),\n        Inimigos_animais(\"Hipopótamo\", 55, 25),\n        Inimigos_animais(\"Dragão de Komodo\", 38, 18),\n        Inimigos_animais(\"Caranguejo Gigante\", 20, 10)\n    ]\n\n    return random.choice(inimigos_disponiveis)\n\ndef start():\n    print('--- TEXTLE RUNNERS ---')\n    print('')\n    print('\\t1 - NOVO JOGO')\n    print('\\t2 - CONTINUAR')\n    print('\\t3 - SAIR\\n')\n    print(\"----------------------\")\n    res = int(input('Digite o numero de acordo com as opções: '))\n    while res not in [1, 2, 3]:\n        res = int(input('Digite o numero de acordo com as opções: '))\n\n    if res == 1:\n        criar_novo_jogo(input(\"Digite o nome do seu personagem: \"))\n    if res == 2:\n        carregar_jogo()\n    if res == 3:\n        creditos()\n        exit()\n\ndef criar_novo_jogo(nome):\n    global char\n    char = Boneco(nome)\n\ndef carregar_jogo():\n    #Criar logica para carregar o jogo\n    pass\n\n\ndef creditos():\n    print(\"\\nJogo criado e desenvolvido por:\\n\"\n          \"\\033[35mMatheus dos Santos - github.com/theuslinor\\033[m\\n\"\n          \"\\033[31mVinicius Oliveira - github.com/kat4r\\033[m\")\n\n#----------------------------------------------\n# O Jogo roda aqui\n#-\n\nstart()\n\n\n\nfor i in range(10):\n    char.caminhar()\n\n# Mostrar o inventário final\nchar.equipar_arma()\nchar.mostrar_inv()\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/scripts/caminhar.py b/scripts/caminhar.py
--- a/scripts/caminhar.py	(revision 16345407ece0fa0677d29d72fa8e16640cf77b8e)
+++ b/scripts/caminhar.py	(date 1727576216433)
@@ -180,7 +180,7 @@
 
 #----------------------------------------------
 # O Jogo roda aqui
-#-
+#----------------------------------------------
 
 start()
 
